;; Auto-generated. Do not edit!


(when (boundp 'action_exercise::ChargingFeedback)
  (if (not (find-package "ACTION_EXERCISE"))
    (make-package "ACTION_EXERCISE"))
  (shadow 'ChargingFeedback (find-package "ACTION_EXERCISE")))
(unless (find-package "ACTION_EXERCISE::CHARGINGFEEDBACK")
  (make-package "ACTION_EXERCISE::CHARGINGFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ChargingFeedback.msg.html
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass action_exercise::ChargingFeedback
  :super ros::object
  :slots (_header _current_charge ))

(defmethod action_exercise::ChargingFeedback
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:current_charge __current_charge) 0.0)
    )
   (send-super :init)
   (setq _header __header)
   (setq _current_charge (float __current_charge))
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:current_charge
   (&optional __current_charge)
   (if __current_charge (setq _current_charge __current_charge)) _current_charge)
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; float32 _current_charge
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; float32 _current_charge
       (sys::poke _current_charge (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; float32 _current_charge
     (setq _current_charge (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get action_exercise::ChargingFeedback :md5sum-) "d683cfa3237882538e32ec20e873407f")
(setf (get action_exercise::ChargingFeedback :datatype-) "action_exercise/ChargingFeedback")
(setf (get action_exercise::ChargingFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
std_msgs/Header header
float32 current_charge

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

")



(provide :action_exercise/ChargingFeedback "d683cfa3237882538e32ec20e873407f")


